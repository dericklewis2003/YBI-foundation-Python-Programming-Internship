# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16hMN8ZI3OiDfLwpnRpMEzV-RlmfIRVvK

Title:

Movie Recommendation System

Objective

To build a movie recommendation system using machine learning that suggests movies to users based on their preferences and past interactions, helping them discover relevant films efficiently.

Data Source

https://www.kaggle.com/datasets/ahsanaseer/top-rated-tmdb-movies-10k

https://raw.githubusercontent.com/Chando0185/movie_recommender_system/main/dataset.csv

Importing Libaries
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Import"""

movies_data = pd.read_csv('/content/movies.csv')

"""Describe Data

"""

movies_data.head()

movies_data.shape
movies_data.describe()

"""Feature Selcection"""

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

"""Data Preprocessing"""

for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')


# combining all the 5 selected features

combined_features = movies_data['genres']+' '+movies_data['keywords']+' ' + \
    movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']


print(combined_features)

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

# getting the similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity.shape)

"""User INput"""

# getting the movie name from the user

movie_name = input(' Enter your favourite movie name : ')

# creating a list with all the movie names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title ==
                                 close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(
    similarity_score, key=lambda x: x[1], reverse=True)
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = movies_data[movies_data.index ==
                                   index]['title'].values[0]
    if (i < 30):
        print(i, '.', title_from_index)
        i += 1

"""**Explanation**


The Movie Recommendation System is designed to suggest movies to users based on their viewing preferences. By analyzing users' past movie choices and comparing them with others' preferences, the system can recommend movies that users are likely to enjoy. It uses machine learning techniques to make these recommendations more accurate and personalized.








"""