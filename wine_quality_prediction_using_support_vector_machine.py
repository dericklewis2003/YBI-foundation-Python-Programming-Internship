# -*- coding: utf-8 -*-
"""Wine Quality Prediction using Support Vector Machine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fCAD5Jb90ohdQn8gc7eem9wC16xUTFa6

**Title of Project**

 White ine Quality Prediction using Support Vector Machine

**Objective**

Predict the quality of white wine using the Support Vector Machine (SVM) algorithm based on various physicochemical properties.

**Data Source**

Red Wine Quality Dataset: winequality-red.csv
White Wine Quality Dataset: winequality-white.csv

Link: https://github.com/shrikant-temburwar/Wine-Quality-Dataset

**Import Libraries**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif

"""**Import Data**"""

import pandas as pd

# Importing white wine data with the correct delimiter
white_wine_data = pd.read_csv('https://raw.githubusercontent.com/shrikant-temburwar/Wine-Quality-Dataset/master/winequality-white.csv', delimiter=';')

# Check the columns again to ensure they are properly parsed
print(white_wine_data.columns)

"""**Describe Data**"""

# Describing white wine data
print(white_wine_data.describe())

print("\nData Info:")
print(white_wine_data.info())

"""**Data Visualization**

"""

import matplotlib.pyplot as plt
import seaborn as sns

# Visualizing the distribution of wine quality in white wine
plt.figure(figsize=(10, 5))
sns.countplot(x='quality', data=white_wine_data)
plt.title('White Wine Quality Distribution')
plt.show()

# Data Visualization - Histogram Plots
plt.figure(figsize=(20, 15))
for i, column in enumerate(white_wine_data.columns, 1):
    plt.subplot(4, 3, i)
    sns.histplot(white_wine_data[column], kde=True)
    plt.title(f'Distribution of {column}')
    plt.tight_layout()
plt.show()

# Data Visualization - Box Plots
plt.figure(figsize=(15, 10))
white_wine_data.boxplot()
plt.title('Box Plots of All White Wine Features')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Feature Selection**"""

# Feature Selection
X = white_wine_data.drop('quality', axis=1)
y = (white_wine_data['quality'] >= 7).astype(int)

# Display all features
print("\nAll Features:")
for i, feature in enumerate(X.columns, 1):
    print(f"{i}. {feature}")

# Select top 5 features
selector = SelectKBest(f_classif, k=5)
X_new = selector.fit_transform(X, y)
selected_features = X.columns[selector.get_support()].tolist()

print("\nTop 5 Selected Features:")
for i, feature in enumerate(selected_features, 1):
    print(f"{i}. {feature}")



# Box Plots for Important Features
plt.figure(figsize=(15, 10))
white_wine_data[selected_features + ['quality']].boxplot(by='quality')
plt.title('Box Plots of Top 5 Important Features by Wine Quality')
plt.suptitle('')  # This removes the automatic suptitle
plt.tight_layout()
plt.show()

"""# Data Preprocessing"""

scaler = StandardScaler()
X_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)

"""#Define Target Variable (y) and

For White Wine:
"""

X = X_scaled[selected_features]

"""**Train Test Split**

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Modeling

"""

svm_model = SVC()
svm_model.fit(X_train, y_train)

"""**Model Evaluation**

"""

y_pred = svm_model.predict(X_test)
print("\nWhite Wine Classification Report:")
print(classification_report(y_test, y_pred, target_names=['Regular', 'Good Quality']))
print("White Wine Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""**Prediction**"""

new_white_wine_samples = X_test[:6]
predicted_white_quality = svm_model.predict(new_white_wine_samples)
print("\nPredicted White Wine Quality for samples:")
for i, prediction in enumerate(predicted_white_quality):
    quality = "Good Quality" if prediction == 1 else "Regular Quality"
    print(f"Sample {i+1}: {quality}")

"""**Explanation**

Data Preprocessing: Ensured the data was clean and standardized for the SVM model.

Feature and Target Variables: Defined the features and target variables for the model.

Train-Test Split: Separated data into training and test sets to evaluate model performance.

Modeling: Trained SVM models to predict wine quality.
Model Evaluation: Assessed model performance using classification reports and confusion matrices.

Prediction: Tested the models with new data samples to make predictions.
"""